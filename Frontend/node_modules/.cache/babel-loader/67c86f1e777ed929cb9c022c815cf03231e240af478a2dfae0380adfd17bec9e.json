{"ast":null,"code":"var _jsxFileName = \"/Users/flamurmaliqi/git/VGIChallenge/VGI-Challenge-Frontend/src/contexts/ConnectionContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport * as api from '../api';\nimport { LoadingContext } from \"./LoadingContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ConnectionContext = /*#__PURE__*/createContext();\nexport const ConnectionContextProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    setIsLoading,\n    setIsLoadingError,\n    setLoadingMessage\n  } = useContext(LoadingContext);\n  const [stops, setStops] = useState([]);\n  const [fromStop, setFromStop] = useState({});\n  const [fromStopName, setFromStopName] = useState(\"\");\n  const [fromStopNameSuggestions, setFromStopNameSuggestions] = useState([]);\n  const [toStop, setToStop] = useState({});\n  const [toStopName, setToStopName] = useState(\"\");\n  const [toStopNameSuggestions, setToStopNameSuggestions] = useState([]);\n  const [departure, setDeparture] = useState(new Date());\n  const [arrival, setArrival] = useState(new Date());\n  const [pax, setPax] = useState(20);\n  const [toggle, setToggle] = useState(\"Abfahrt\");\n  const [isFirstSearch, setIsFirstSearch] = useState(true);\n  const [selectedConnection, setSelectedConnection] = useState(null);\n  const [connections, setConnections] = useState([]);\n  useEffect(() => {\n    async function getStops() {\n      setIsLoadingError(false);\n      setLoadingMessage(\"Brumm Brumm...\");\n      setIsLoading(true);\n      try {\n        const fetchedStops = await api.getStops();\n        setStops(fetchedStops);\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoadingError(true);\n        setLoadingMessage(\"Ein unerwarteter Fehler ist aufgetreten. Bitte 端berpr端fen Sie Ihre Netzwerkverbindung.\");\n        console.log(error);\n      }\n    }\n    getStops();\n  }, []); // Empty dependency array means this runs only once when the component mounts\n\n  async function findConnections(prepend = false) {\n    setIsLoadingError(false);\n    setLoadingMessage(\"Verbindungen suchen...\");\n    setIsLoading(true);\n    const connections = await api.findConnections(fromStop, toStop, departure, arrival, pax);\n\n    // Sort the new connections based on the departure time (ascending)\n    const sortedConnections = connections.sort((a, b) => {\n      const aDeparture = new Date(a.from.departure);\n      const bDeparture = new Date(b.from.departure);\n      return aDeparture - bDeparture; // Ascending order\n    });\n\n    // Function to check for duplicates\n    const isDuplicate = (newConnection, connectionsList) => {\n      return connectionsList.some(existingConnection => {\n        return existingConnection.from.departure === newConnection.from.departure && existingConnection.to.arrival === newConnection.to.arrival && existingConnection.from.stopName === newConnection.from.stopName && existingConnection.to.stopName === newConnection.to.stopName;\n      });\n    };\n\n    // Filter out duplicates from the sorted connections\n    const filteredConnections = sortedConnections.filter(connection => {\n      return !isDuplicate(connection, prepend ? connections : []);\n    });\n    if (prepend) {\n      // Prepend the new connections to the existing ones\n      setConnections(prevConnections => {\n        const combined = [...filteredConnections, ...prevConnections];\n        // Sort combined list based on departure time of 'fromStop'\n        return combined.sort((a, b) => {\n          const aDeparture = new Date(a.from.departure);\n          const bDeparture = new Date(b.from.departure);\n          return aDeparture - bDeparture; // Ascending order\n        });\n      });\n    } else {\n      setConnections(connections);\n    }\n    if (isFirstSearch) {\n      setIsFirstSearch(false);\n    }\n    setIsLoading(false);\n  }\n  return /*#__PURE__*/_jsxDEV(ConnectionContext.Provider, {\n    value: {\n      fromStop,\n      setFromStop,\n      fromStopName,\n      setFromStopName,\n      fromStopNameSuggestions,\n      setFromStopNameSuggestions,\n      toStop,\n      setToStop,\n      toStopName,\n      setToStopName,\n      toStopNameSuggestions,\n      setToStopNameSuggestions,\n      departure,\n      setDeparture,\n      arrival,\n      setArrival,\n      pax,\n      setPax,\n      toggle,\n      setToggle,\n      stops,\n      isFirstSearch,\n      setIsFirstSearch,\n      connections,\n      setConnections,\n      selectedConnection,\n      setSelectedConnection,\n      findConnections\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n_s(ConnectionContextProvider, \"ZFAADpqjgYil/Hw4CjLwFUZdlYw=\");\n_c = ConnectionContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ConnectionContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","api","LoadingContext","jsxDEV","_jsxDEV","ConnectionContext","ConnectionContextProvider","children","_s","setIsLoading","setIsLoadingError","setLoadingMessage","stops","setStops","fromStop","setFromStop","fromStopName","setFromStopName","fromStopNameSuggestions","setFromStopNameSuggestions","toStop","setToStop","toStopName","setToStopName","toStopNameSuggestions","setToStopNameSuggestions","departure","setDeparture","Date","arrival","setArrival","pax","setPax","toggle","setToggle","isFirstSearch","setIsFirstSearch","selectedConnection","setSelectedConnection","connections","setConnections","getStops","fetchedStops","error","console","log","findConnections","prepend","sortedConnections","sort","a","b","aDeparture","from","bDeparture","isDuplicate","newConnection","connectionsList","some","existingConnection","to","stopName","filteredConnections","filter","connection","prevConnections","combined","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/flamurmaliqi/git/VGIChallenge/VGI-Challenge-Frontend/src/contexts/ConnectionContext.js"],"sourcesContent":["import React, {createContext, useContext, useEffect, useState} from 'react';\nimport * as api from '../api';\nimport {LoadingContext} from \"./LoadingContext\";\n\nexport const ConnectionContext = createContext();\n\nexport const ConnectionContextProvider = ({ children }) => {\n    const { setIsLoading, setIsLoadingError, setLoadingMessage } = useContext(LoadingContext);\n    const [stops, setStops] = useState([]);\n    const [fromStop, setFromStop] = useState({});\n    const [fromStopName, setFromStopName] = useState(\"\");\n    const [fromStopNameSuggestions, setFromStopNameSuggestions] = useState([]);\n    const [toStop, setToStop] = useState({});\n    const [toStopName, setToStopName] = useState(\"\");\n    const [toStopNameSuggestions, setToStopNameSuggestions] = useState([]);\n    const [departure, setDeparture] = useState(new Date());\n    const [arrival, setArrival] = useState(new Date());\n    const [pax, setPax] = useState(20);\n    const [toggle, setToggle] = useState(\"Abfahrt\");\n    const [isFirstSearch, setIsFirstSearch] = useState(true);\n    const [selectedConnection, setSelectedConnection] = useState(null);\n    const [connections, setConnections] = useState([]);\n\n    useEffect(() => {\n            async function getStops() {\n                setIsLoadingError(false);\n                setLoadingMessage(\"Brumm Brumm...\");\n                setIsLoading(true);\n                try {\n                    const fetchedStops = await api.getStops();\n                    setStops(fetchedStops);\n                    setIsLoading(false);\n                } catch (error) {\n                    setIsLoadingError(true);\n                    setLoadingMessage(\"Ein unerwarteter Fehler ist aufgetreten. Bitte 端berpr端fen Sie Ihre Netzwerkverbindung.\")\n                    console.log(error);\n                }\n            }\n            getStops();\n    }, []);  // Empty dependency array means this runs only once when the component mounts\n\n    async function findConnections(prepend = false) {\n        setIsLoadingError(false);\n        setLoadingMessage(\"Verbindungen suchen...\")\n        setIsLoading(true);\n        const connections = await api.findConnections(fromStop, toStop, departure, arrival, pax);\n\n        // Sort the new connections based on the departure time (ascending)\n        const sortedConnections = connections.sort((a, b) => {\n            const aDeparture = new Date(a.from.departure);\n            const bDeparture = new Date(b.from.departure);\n            return aDeparture - bDeparture; // Ascending order\n        });\n\n        // Function to check for duplicates\n        const isDuplicate = (newConnection, connectionsList) => {\n            return connectionsList.some(existingConnection => {\n                return (\n                    existingConnection.from.departure === newConnection.from.departure &&\n                    existingConnection.to.arrival === newConnection.to.arrival &&\n                    existingConnection.from.stopName === newConnection.from.stopName &&\n                    existingConnection.to.stopName === newConnection.to.stopName\n                );\n            });\n        };\n\n        // Filter out duplicates from the sorted connections\n        const filteredConnections = sortedConnections.filter(connection => {\n            return !isDuplicate(connection, prepend ? connections : []);\n        });\n\n\n        if (prepend) {\n            // Prepend the new connections to the existing ones\n            setConnections((prevConnections) => {\n                const combined = [...filteredConnections, ...prevConnections];\n                // Sort combined list based on departure time of 'fromStop'\n                return combined.sort((a, b) => {\n                    const aDeparture = new Date(a.from.departure);\n                    const bDeparture = new Date(b.from.departure);\n                    return aDeparture - bDeparture; // Ascending order\n                });\n            });\n        } else {\n            setConnections(connections);\n        }\n\n        if (isFirstSearch) {\n            setIsFirstSearch(false);\n        }\n        setIsLoading(false);\n    }\n\n    return (\n        <ConnectionContext.Provider\n            value={{\n                fromStop,\n                setFromStop,\n                fromStopName,\n                setFromStopName,\n                fromStopNameSuggestions,\n                setFromStopNameSuggestions,\n                toStop,\n                setToStop,\n                toStopName,\n                setToStopName,\n                toStopNameSuggestions,\n                setToStopNameSuggestions,\n                departure,\n                setDeparture,\n                arrival,\n                setArrival,\n                pax,\n                setPax,\n                toggle,\n                setToggle,\n                stops,\n                isFirstSearch,\n                setIsFirstSearch,\n                connections,\n                setConnections,\n                selectedConnection,\n                setSelectedConnection,\n                findConnections\n            }}\n        >\n            {children}\n        </ConnectionContext.Provider>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}